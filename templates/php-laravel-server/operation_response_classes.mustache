{{>php_file_header}}

namespace {{invokerPackage}}\Http\Responses;

use Illuminate\Http\JsonResponse;
{{#responses}}
{{#dataType}}
use {{dataType}};
{{/dataType}}
{{/responses}}

{{#responses}}
/**
 * {{message}} response for {{operationId}} operation
 * HTTP Status: {{code}}
{{#message}}
 * Description: {{.}}
{{/message}}
 */
class {{operationIdCamelCase}}{{code}}Response implements {{operationIdCamelCase}}ResponseInterface
{
    public function __construct(
{{#dataType}}
{{#isArray}}
        /** @var {{baseType}}[] */
        private array $data
{{/isArray}}
{{^isArray}}
        private {{dataType}} $data
{{/isArray}}
{{/dataType}}
{{^dataType}}
        // No content for {{code}} response
{{/dataType}}
    ) {}

    public function toJsonResponse(): JsonResponse
    {
{{#dataType}}
{{#isArray}}
        // Serialize array of models
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = array_map(
            fn($item) => $serializer->serialize($item, 'array'),
            $this->data
        );
        return response()->json($serialized, {{code}});
{{/isArray}}
{{^isArray}}
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, {{code}});
{{/isArray}}
{{/dataType}}
{{^dataType}}
        return response()->json(null, {{code}});
{{/dataType}}
    }
}

{{/responses}}
