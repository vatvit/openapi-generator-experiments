{{>php_file_header}}
/**
 * GENERATED API ROUTES
 *
 * This file is generated from OpenAPI specification.
 * Include this file from your Laravel routes/api.php within a Route::group.
 *
 * Controller name is defined in OpenAPI spec: info.title
 *
 * Routes will use middleware groups with 'api.middlewareGroup.' prefix if they are defined.
 * For example: 'api.middlewareGroup.findPets', 'api.middlewareGroup.addPet', etc.
 * Define these groups in bootstrap/app.php only when you need custom middleware for an operation.
 *
 * Usage in routes/api.php:
 * ```php
 * // Bind controller name to concrete implementation in Service Container
 * app()->bind('{{appName}}', \App\Http\Controllers\Api\YourController::class);
 *
 * // Wrap generated routes in a group
 * Route::group(['prefix' => 'v2', 'middleware' => ['api']], function ($router) {
 *     require base_path('generated/scaffolding/routes.php');
 * });
 * ```
 *
 * MIDDLEWARE USAGE:
 *
 * Routes will automatically use middleware groups named 'api.middlewareGroup.{operationId}'
 * if they are defined in your application. Define middleware groups in bootstrap/app.php:
 *
 * ```php
 * ->withMiddleware(function (Middleware $middleware): void {
 *     // Define middleware groups for specific operations
 *     $middleware->group('api.middlewareGroup.findPets', [
 *         \App\Http\Middleware\CacheResponse::class,
 *     ]);
 *
 *     $middleware->group('api.middlewareGroup.addPet', [
 *         \App\Http\Middleware\ValidateOwnership::class,
 *         \App\Http\Middleware\LogCreation::class,
 *     ]);
 *
 *     $middleware->group('api.middlewareGroup.deletePet', [
 *         \App\Http\Middleware\RequireAdmin::class,
 *     ]);
 * })
 * ```
 *
 * Routes will only have middleware attached if their corresponding group is defined.
 * Operations without defined middleware groups will have no middleware applied.
 */

// Use $router variable passed from Route::group closure
// This file expects $router to be available from the including context

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
/**
 * {{httpMethod}} {{{path}}}
 * {{#summary}}{{summary}}{{/summary}}
 * {{#notes}}{{notes}}{{/notes}}
 */
$route = $router->{{httpMethod}}('{{{basePathWithoutHost}}}{{{path}}}', '{{appName}}@{{operationId}}')
    ->name('api.{{operationId}}');

// Only attach middleware if the group is registered in the application
if ($router->hasMiddlewareGroup('api.middlewareGroup.{{operationId}}')) {
    $route->middleware('api.middlewareGroup.{{operationId}}');
}

{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
