{{>php_file_header}}

namespace {{invokerPackage}}\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

/**
 * Security Middleware for {{classname}}
 *
 * Generated from OpenAPI security schemes
 *
 * Supported authentication methods:
{{#authMethods}}
 * - {{name}}: {{type}}{{#description}} - {{description}}{{/description}}
{{/authMethods}}
 */
class {{classname}}SecurityMiddleware
{
    /**
     * Handle an incoming request.
     */
    public function handle(Request $request, Closure $next): Response
    {
{{#authMethods}}
{{#isApiKey}}
        // API Key Authentication: {{name}}
        // Expected in: {{keyParamName}} ({{#isKeyInHeader}}header{{/isKeyInHeader}}{{#isKeyInQuery}}query{{/isKeyInQuery}}{{#isKeyInCookie}}cookie{{/isKeyInCookie}})
        $apiKey = $request->{{#isKeyInHeader}}header{{/isKeyInHeader}}{{#isKeyInQuery}}query{{/isKeyInQuery}}{{#isKeyInCookie}}cookie{{/isKeyInCookie}}('{{keyParamName}}');

        if (empty($apiKey)) {
            return response()->json([
                'code' => 'UNAUTHORIZED',
                'message' => 'API key required in {{keyParamName}}'
            ], 401);
        }

        // TODO: Validate API key against your storage
        // Example: if (!$this->isValidApiKey($apiKey)) { return 401; }

{{/isApiKey}}
{{#isBasicBasic}}
        // HTTP Basic Authentication
        $authHeader = $request->header('Authorization');

        if (empty($authHeader) || !str_starts_with($authHeader, 'Basic ')) {
            return response()->json([
                'code' => 'UNAUTHORIZED',
                'message' => 'Basic authentication required'
            ], 401);
        }

        $credentials = base64_decode(substr($authHeader, 6));
        [$username, $password] = explode(':', $credentials, 2);

        // TODO: Validate credentials
        // Example: if (!Auth::attempt(['username' => $username, 'password' => $password])) { return 401; }

{{/isBasicBasic}}
{{#isBasicBearer}}
        // Bearer Token Authentication (JWT)
        $authHeader = $request->header('Authorization');

        if (empty($authHeader) || !str_starts_with($authHeader, 'Bearer ')) {
            return response()->json([
                'code' => 'UNAUTHORIZED',
                'message' => 'Bearer token required'
            ], 401);
        }

        $token = substr($authHeader, 7);

        // TODO: Validate JWT token
        // Example:
        // try {
        //     $payload = JWT::decode($token, $key, ['HS256']);
        //     $request->attributes->set('user', $payload);
        // } catch (\Exception $e) {
        //     return response()->json(['code' => 'INVALID_TOKEN', 'message' => 'Invalid or expired token'], 401);
        // }

{{/isBasicBearer}}
{{#isOAuth}}
        // OAuth 2.0 Authentication
        // Scopes required: {{#scopes}}{{scope}}{{^-last}}, {{/-last}}{{/scopes}}
        $authHeader = $request->header('Authorization');

        if (empty($authHeader) || !str_starts_with($authHeader, 'Bearer ')) {
            return response()->json([
                'code' => 'UNAUTHORIZED',
                'message' => 'OAuth token required'
            ], 401);
        }

        $token = substr($authHeader, 7);

        // TODO: Validate OAuth token and scopes
        // Example:
        // $tokenData = $this->validateOAuthToken($token);
        // $requiredScopes = [{{#scopes}}'{{scope}}'{{^-last}}, {{/-last}}{{/scopes}}];
        // if (!$this->hasRequiredScopes($tokenData, $requiredScopes)) {
        //     return response()->json(['code' => 'INSUFFICIENT_SCOPE', 'message' => 'Token lacks required scopes'], 403);
        // }

{{/isOAuth}}
{{/authMethods}}
        return $next($request);
    }
}
