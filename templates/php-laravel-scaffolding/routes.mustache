{{>php_file_header}}
/**
 * GENERATED API ROUTES
 *
 * This file is generated from OpenAPI specification.
 * Include this file from your Laravel routes/api.php within a Route::group.
 *
 * Controller name is defined in OpenAPI spec: info.title
 *
 * Each route has a unique middleware alias based on its operationId with 'api.operation.' prefix.
 * For example: 'api.operation.findPets', 'api.operation.addPet', 'api.operation.deletePet', etc.
 *
 * Usage in routes/api.php:
 * ```php
 * // Bind controller name to concrete implementation in Service Container
 * app()->bind('{{appName}}', \App\Http\Controllers\Api\YourController::class);
 *
 * // Wrap generated routes in a group
 * Route::group(['prefix' => 'v2', 'middleware' => ['api']], function ($router) {
 *     require base_path('generated/scaffolding/routes.php');
 * });
 * ```
 *
 * MIDDLEWARE USAGE:
 *
 * Register operation-specific middleware in bootstrap/app.php:
 * ```php
 * ->withMiddleware(function (Middleware $middleware): void {
 *     $middleware->alias([
 *         // Register middleware for each operation
 *         'api.operation.findPets' => \App\Http\Middleware\FindPetsMiddleware::class,
 *         'api.operation.addPet' => \App\Http\Middleware\AddPetMiddleware::class,
 *         'api.operation.deletePet' => \App\Http\Middleware\DeletePetMiddleware::class,
 *         'api.operation.findPetById' => \App\Http\Middleware\FindPetByIdMiddleware::class,
 *
 *         // Or use a single middleware that handles all operations
 *         'api.operation.findPets' => \App\Http\Middleware\OperationMiddleware::class,
 *         'api.operation.addPet' => \App\Http\Middleware\OperationMiddleware::class,
 *         'api.operation.deletePet' => \App\Http\Middleware\OperationMiddleware::class,
 *         'api.operation.findPetById' => \App\Http\Middleware\OperationMiddleware::class,
 *     ]);
 * })
 * ```
 *
 * Example OperationMiddleware that detects which operation is being called:
 * ```php
 * class OperationMiddleware {
 *     public function handle(Request $request, Closure $next): Response {
 *         $route = $request->route();
 *         $operationId = $route->getName(); // e.g., 'api.findPets'
 *
 *         // Apply operation-specific logic based on route name
 *         match ($operationId) {
 *             'api.findPets' => $this->handleFindPets($request),
 *             'api.addPet' => $this->handleAddPet($request),
 *             default => null,
 *         };
 *
 *         return $next($request);
 *     }
 * }
 * ```
 */

// Use $router variable from Route::group closure (if available), otherwise fallback to Route facade
if (!isset($router)) {
    $router = app('router');
}

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
/**
 * {{httpMethod}} {{{path}}}
 * {{#summary}}{{summary}}{{/summary}}
 * {{#notes}}{{notes}}{{/notes}}
 */
$router->{{httpMethod}}('{{{basePathWithoutHost}}}{{{path}}}', '{{appName}}@{{operationId}}')
    ->name('api.{{operationId}}')
    ->middleware('api.operation.{{operationId}}');

{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
