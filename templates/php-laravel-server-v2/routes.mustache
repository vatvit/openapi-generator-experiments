{{>php_file_header}}
/**
 * GENERATED API ROUTES
 *
 * This file is generated from OpenAPI specification.
 * Include this file from your Laravel routes/api.php within a Route::group.
 *
 * Controller name is defined in OpenAPI spec: info.title
 *
 * Routes will use middleware groups with 'api.middlewareGroup.' prefix if they are defined.
 * For example: 'api.middlewareGroup.findPets', 'api.middlewareGroup.addPet', etc.
 * Define these groups in bootstrap/app.php only when you need custom middleware for an operation.
 *
 * Usage in routes/api.php:
 * ```php
 * // Wrap generated routes in a group
 * Route::group(['prefix' => 'v2', 'middleware' => ['api']], function ($router) {
 *     require base_path('generated/server/routes.php');
 * });
 * ```
 *
 * MIDDLEWARE USAGE:
 *
 * Routes will automatically use middleware groups named 'api.middlewareGroup.{operationId}'
 * if they are defined in your application. Define middleware groups in bootstrap/app.php:
 *
 * ```php
 * ->withMiddleware(function (Middleware $middleware): void {
 *     // Define middleware groups for specific operations
 *     $middleware->group('api.middlewareGroup.findPets', [
 *         \App\Http\Middleware\CacheResponse::class,
 *     ]);
 *
 *     $middleware->group('api.middlewareGroup.addPet', [
 *         \App\Http\Middleware\ValidateOwnership::class,
 *         \App\Http\Middleware\LogCreation::class,
 *     ]);
 *
 *     $middleware->group('api.middlewareGroup.deletePet', [
 *         \App\Http\Middleware\RequireAdmin::class,
 *     ]);
 * })
 * ```
 *
 * Routes will only have middleware attached if their corresponding group is defined.
 * Operations without defined middleware groups will have no middleware applied.
 */

// Use $router variable passed from Route::group closure
// This file expects $router to be available from the including context

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
/**
 * {{httpMethod}} {{{path}}}
 * {{#summary}}{{summary}}{{/summary}}
 * {{#notes}}{{notes}}{{/notes}}
{{#hasAuthMethods}}
 *
 * Security Requirements:
{{#authMethods}}
 * - {{name}} ({{type}}){{#description}}: {{description}}{{/description}}
{{#isApiKey}}
 *   Location: {{keyParamName}} in {{#isKeyInHeader}}header{{/isKeyInHeader}}{{#isKeyInQuery}}query{{/isKeyInQuery}}
{{/isApiKey}}
{{#isBasicBearer}}
 *   Format: Bearer token (JWT)
{{/isBasicBearer}}
{{#isOAuth}}
 *   Required scopes: {{#scopes}}{{scope}}{{^-last}}, {{/-last}}{{/scopes}}
{{/isOAuth}}
{{/authMethods}}
 *
 * Suggested middleware group (in bootstrap/app.php):
 * $middleware->group('api.middlewareGroup.{{operationId}}', [
{{#authMethods}}
{{#isApiKey}}
 *     \App\Http\Middleware\ValidateApiKey::class,  // Validate {{keyParamName}} header/query
{{/isApiKey}}
{{#isBasicBasic}}
 *     \App\Http\Middleware\ValidateBasicAuth::class,
{{/isBasicBasic}}
{{#isBasicBearer}}
 *     \App\Http\Middleware\ValidateBearerToken::class,  // Validate JWT token
{{/isBasicBearer}}
{{#isOAuth}}
 *     \App\Http\Middleware\ValidateOAuthScopes::class,  // Validate scopes: {{#scopes}}{{scope}}{{^-last}}, {{/-last}}{{/scopes}}
{{/isOAuth}}
{{/authMethods}}
 * ]);
{{/hasAuthMethods}}
 */
$route = $router->{{httpMethod}}('{{{basePathWithoutHost}}}{{{path}}}', [{{invokerPackage}}\Http\Controllers\DefaultController::class, '{{operationId}}'])
    ->name('api.{{operationId}}');

{{#hasAuthMethods}}
// SECURITY REQUIREMENT: This operation requires authentication
// Required security: {{#authMethods}}{{name}}{{^-last}} OR {{/-last}}{{/authMethods}}
// Middleware group 'api.middlewareGroup.{{operationId}}' MUST be defined and contain middleware implementing:
{{#authMethods}}
// - {{invokerPackage}}\Security\{{name}}Interface
{{/authMethods}}

// Attach middleware group (if defined)
if ($router->hasMiddlewareGroup('api.middlewareGroup.{{operationId}}')) {
    $route->middleware('api.middlewareGroup.{{operationId}}');
}

{{/hasAuthMethods}}
{{^hasAuthMethods}}
// No security required - public endpoint
// Middleware can still be attached if group is defined
if ($router->hasMiddlewareGroup('api.middlewareGroup.{{operationId}}')) {
    $route->middleware('api.middlewareGroup.{{operationId}}');
}
{{/hasAuthMethods}}

{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}

// ============================================================================
// Security Middleware Validation (Auto-generated)
// ============================================================================
// Validates that all required security middleware is properly configured
// Only runs when APP_DEBUG=true (development mode)
// ============================================================================

if (config('app.debug', false)) {
    // Validate security middleware configuration
    if (class_exists({{invokerPackage}}\Security\SecurityValidator::class)) {
        try {
            {{invokerPackage}}\Security\SecurityValidator::validateMiddleware($router);
        } catch (\RuntimeException $e) {
            // Log validation errors but don't break the application
            error_log("Security middleware validation failed for {{invokerPackage}}:");
            error_log($e->getMessage());

            // In debug mode, you might want to throw the exception to catch issues early
            // Uncomment the line below to make validation failures fatal:
            // throw $e;
        }
    }
}
