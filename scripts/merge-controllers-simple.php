#!/usr/bin/env php
<?php
/**
 * Simple controller merger using straightforward regex
 */

if ($argc !== 3) {
    echo "Usage: {$argv[0]} <source-dir> <output-file>\n";
    exit(1);
}

$sourceDir = $argv[1];
$outputFile = $argv[2];

$files = glob("{$sourceDir}/*.php");
if (empty($files)) {
    echo "Error: No controller files found\n";
    exit(1);
}

$namespace = null;
$uses = [];
$methods = [];

foreach ($files as $file) {
    $content = file_get_contents($file);

    // Extract namespace (first match wins)
    if (!$namespace && preg_match('/namespace\s+([^;]+);/', $content, $m)) {
        $namespace = $m[1];
    }

    // Extract use statements
    preg_match_all('/^use\s+([^;]+);/m', $content, $m);
    foreach ($m[1] as $use) {
        $uses[$use] = true;
    }

    // Extract class body content (everything between class { and final })
    if (preg_match('/class\s+\w+\s+extends\s+Controller\s*\{(.+)\}/s', $content, $classMatch)) {
        $classBody = $classMatch[1];

        // Extract methods: /**...*/ followed by public/protected function
        // This regex specifically looks for method patterns, not class patterns
        preg_match_all('/
            ^\s{4}\/\*\*                                # Start PHPDoc at indentation level 4
            .*?                                         # PHPDoc content (non-greedy)
            \*\/\s*                                     # End PHPDoc
            (public|protected)\s+function\s+(\w+)       # function declaration
            [^{]*                                       # parameters and return type
            \{                                          # opening brace
            (?:                                         # non-capturing group
                (?:[^{}]+)                              # non-brace content
                |                                       # OR
                \{(?:[^{}]|\{[^{}]*\})*\}              # nested braces (one level deep)
            )*                                          # repeat
            \s{4}\}                                     # closing brace at indentation 4
        /xms', $classBody, $matches, PREG_SET_ORDER);

        foreach ($matches as $match) {
            $methodName = $match[2];
            if (!isset($methods[$methodName])) {
                $methods[$methodName] = $match[0];
                echo "‚úì {$methodName}\n";
            }
        }
    }
}

if (empty($methods)) {
    echo "Error: No methods extracted\n";
    exit(1);
}

// Build output
$output = "<?php declare(strict_types=1);\n\n";
$output .= "namespace {$namespace};\n\n";

$useList = array_keys($uses);
sort($useList);
foreach ($useList as $use) {
    $output .= "use {$use};\n";
}

$output .= "\n/**\n";
$output .= " * DefaultController - Merged Controller\n";
$output .= " *\n";
$output .= " * Generated by merging all tag-based controllers\n";
$output .= " * Contains all operations without duplication\n";
$output .= " */\n";
$output .= "class DefaultController extends Controller\n";
$output .= "{\n";

foreach ($methods as $method) {
    $output .= $method . "\n\n";
}

$output .= "}\n";

file_put_contents($outputFile, $output);

$ops = array_filter(array_keys($methods), fn($n) => !str_ends_with($n, 'ValidationRules'));
echo "\n‚úÖ Merged " . count($files) . " files\n";
echo "‚úÖ Unique methods: " . count($methods) . " (" . count($ops) . " operations + " . (count($methods) - count($ops)) . " validation)\n";

// Delete originals
foreach ($files as $file) {
    if ($file !== $outputFile) {
        unlink($file);
        echo "üóëÔ∏è  {$file}\n";
    }
}
