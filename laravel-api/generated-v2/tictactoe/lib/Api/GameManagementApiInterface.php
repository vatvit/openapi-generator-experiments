<?php declare(strict_types=1);

/**
 * Tic Tac Toe
 * This API allows writing down marks on a Tic Tac Toe board and requesting the state of the board or of individual squares.
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace TicTacToeApiV2\Scaffolding\Api;

use Illuminate\Http\JsonResponse;


interface GameManagementApiInterface {


    /**
     * Operation createGame
     *
     * Create a new game
     * @param \TicTacToeApiV2\Scaffolding\Models\CreateGameRequest $createGameRequest
     * @return CreateGameResponseInterface
     */
    public function createGame(
            \TicTacToeApiV2\Scaffolding\Models\CreateGameRequest $createGameRequest,
    ): CreateGameResponseInterface;


    /**
     * Operation deleteGame
     *
     * Delete a game
     * @param string $gameId
     * @return DeleteGameResponseInterface
     */
    public function deleteGame(
            string $gameId,
    ): DeleteGameResponseInterface;


    /**
     * Operation getGame
     *
     * Get game details
     * @param string $gameId
     * @return GetGameResponseInterface
     */
    public function getGame(
            string $gameId,
    ): GetGameResponseInterface;


    /**
     * Operation listGames
     *
     * List all games
     * @param null | int $page
     * @param null | int $limit
     * @param null | \TicTacToeApiV2\Scaffolding\Models\GameStatus $status
     * @param null | string $playerId
     * @return ListGamesResponseInterface
     */
    public function listGames(
            ?int $page,
            ?int $limit,
            ?\TicTacToeApiV2\Scaffolding\Models\GameStatus $status,
            ?string $playerId,
    ): ListGamesResponseInterface;

}

// ============================================================================
// Response Interfaces - One per operation
// ============================================================================

/**
 * Response interface for createGame operation
 * All possible responses for this operation must implement this interface
 */
interface CreateGameResponseInterface
{
    /**
     * Convert this response to a JSON response
     * @return JsonResponse
     */
    public function toJsonResponse(): JsonResponse;
}

/**
 * Response interface for deleteGame operation
 * All possible responses for this operation must implement this interface
 */
interface DeleteGameResponseInterface
{
    /**
     * Convert this response to a JSON response
     * @return JsonResponse
     */
    public function toJsonResponse(): JsonResponse;
}

/**
 * Response interface for getGame operation
 * All possible responses for this operation must implement this interface
 */
interface GetGameResponseInterface
{
    /**
     * Convert this response to a JSON response
     * @return JsonResponse
     */
    public function toJsonResponse(): JsonResponse;
}

/**
 * Response interface for listGames operation
 * All possible responses for this operation must implement this interface
 */
interface ListGamesResponseInterface
{
    /**
     * Convert this response to a JSON response
     * @return JsonResponse
     */
    public function toJsonResponse(): JsonResponse;
}


// ============================================================================
// Concrete Response Classes - One per response code per operation
// ============================================================================

/**
 * HTTP 201 response for createGame operation
 * Game created successfully
 */
class CreateGame201Response implements CreateGameResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Game $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 201);
    }
}

/**
 * HTTP 400 response for createGame operation
 * Bad Request - Invalid parameters
 */
class CreateGame400Response implements CreateGameResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Error $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 400);
    }
}

/**
 * HTTP 401 response for createGame operation
 * Unauthorized - Authentication required
 */
class CreateGame401Response implements CreateGameResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Error $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 401);
    }
}

/**
 * HTTP 422 response for createGame operation
 * Validation Error - Request body validation failed
 */
class CreateGame422Response implements CreateGameResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\ValidationError $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 422);
    }
}

/**
 * HTTP 204 response for deleteGame operation
 * Game deleted successfully
 */
class DeleteGame204Response implements DeleteGameResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\NoContent204 $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 204);
    }
}

/**
 * HTTP 403 response for deleteGame operation
 * Forbidden - Insufficient permissions
 */
class DeleteGame403Response implements DeleteGameResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Error $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 403);
    }
}

/**
 * HTTP 404 response for deleteGame operation
 * Not Found - Resource does not exist
 */
class DeleteGame404Response implements DeleteGameResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Error $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 404);
    }
}

/**
 * HTTP 200 response for getGame operation
 * Successful response
 */
class GetGame200Response implements GetGameResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Game $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 200);
    }
}

/**
 * HTTP 404 response for getGame operation
 * Not Found - Resource does not exist
 */
class GetGame404Response implements GetGameResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Error $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 404);
    }
}

/**
 * HTTP 200 response for listGames operation
 * Successful response
 */
class ListGames200Response implements ListGamesResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\GameListResponse $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 200);
    }
}

/**
 * HTTP 400 response for listGames operation
 * Bad Request - Invalid parameters
 */
class ListGames400Response implements ListGamesResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Error $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 400);
    }
}

/**
 * HTTP 401 response for listGames operation
 * Unauthorized - Authentication required
 */
class ListGames401Response implements ListGamesResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Error $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 401);
    }
}


// ============================================================================
// Handler Interfaces - One per operation
// ============================================================================

/**
 * Handler interface for createGame operation
 * Implement this interface in your application to provide business logic
 */
interface CreateGameHandlerInterface
{
    /**
     * Handle createGame operation
     *
     * Creates a new TicTacToe game with specified configuration.
     *
     * @param \TicTacToeApiV2\Scaffolding\Models\CreateGameRequest $createGameRequest 
     * @return CreateGameResponseInterface
     */
    public function handle(
        \TicTacToeApiV2\Scaffolding\Models\CreateGameRequest $createGameRequest
    ): CreateGameResponseInterface;
}

/**
 * Handler interface for deleteGame operation
 * Implement this interface in your application to provide business logic
 */
interface DeleteGameHandlerInterface
{
    /**
     * Handle deleteGame operation
     *
     * Deletes a game. Only allowed for game creators or admins.
     *
     * @param string $gameId Unique game identifier
     * @return DeleteGameResponseInterface
     */
    public function handle(
        string $gameId
    ): DeleteGameResponseInterface;
}

/**
 * Handler interface for getGame operation
 * Implement this interface in your application to provide business logic
 */
interface GetGameHandlerInterface
{
    /**
     * Handle getGame operation
     *
     * Retrieves detailed information about a specific game.
     *
     * @param string $gameId Unique game identifier
     * @return GetGameResponseInterface
     */
    public function handle(
        string $gameId
    ): GetGameResponseInterface;
}

/**
 * Handler interface for listGames operation
 * Implement this interface in your application to provide business logic
 */
interface ListGamesHandlerInterface
{
    /**
     * Handle listGames operation
     *
     * Retrieves a paginated list of games with optional filtering.
     *
     * @param int $page Page number for pagination
     * @param int $limit Number of items per page
     * @param \TicTacToeApiV2\Scaffolding\Models\GameStatus $status Filter by game status
     * @param string $playerId Filter games by player ID
     * @return ListGamesResponseInterface
     */
    public function handle(
        ?int $page,
        ?int $limit,
        ?\TicTacToeApiV2\Scaffolding\Models\GameStatus $status,
        ?string $playerId
    ): ListGamesResponseInterface;
}

