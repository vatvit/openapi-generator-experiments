<?php declare(strict_types=1);

/**
 * Tic Tac Toe
 * This API allows writing down marks on a Tic Tac Toe board and requesting the state of the board or of individual squares.
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace TicTacToeApiV2\Scaffolding\Api;

use Illuminate\Http\JsonResponse;


interface GameplayApiInterface {


    /**
     * Operation getBoard
     *
     * Get the game board
     * @param string $gameId
     * @return GetBoardResponseInterface
     */
    public function getBoard(
            string $gameId,
    ): GetBoardResponseInterface;


    /**
     * Operation getGame
     *
     * Get game details
     * @param string $gameId
     * @return GetGameResponseInterface
     */
    public function getGame(
            string $gameId,
    ): GetGameResponseInterface;


    /**
     * Operation getMoves
     *
     * Get move history
     * @param string $gameId
     * @return GetMovesResponseInterface
     */
    public function getMoves(
            string $gameId,
    ): GetMovesResponseInterface;


    /**
     * Operation getSquare
     *
     * Get a single board square
     * @param string $gameId
     * @param int $row
     * @param int $column
     * @return GetSquareResponseInterface
     */
    public function getSquare(
            string $gameId,
            int $row,
            int $column,
    ): GetSquareResponseInterface;


    /**
     * Operation putSquare
     *
     * Set a single board square
     * @param string $gameId
     * @param int $row
     * @param int $column
     * @param \TicTacToeApiV2\Scaffolding\Models\MoveRequest $moveRequest
     * @return PutSquareResponseInterface
     */
    public function putSquare(
            string $gameId,
            int $row,
            int $column,
            \TicTacToeApiV2\Scaffolding\Models\MoveRequest $moveRequest,
    ): PutSquareResponseInterface;

}

// ============================================================================
// Response Interfaces - One per operation
// ============================================================================

/**
 * Response interface for getBoard operation
 * All possible responses for this operation must implement this interface
 */
interface GetBoardResponseInterface
{
    /**
     * Convert this response to a JSON response
     * @return JsonResponse
     */
    public function toJsonResponse(): JsonResponse;
}

/**
 * Response interface for getGame operation
 * All possible responses for this operation must implement this interface
 */
interface GetGameResponseInterface
{
    /**
     * Convert this response to a JSON response
     * @return JsonResponse
     */
    public function toJsonResponse(): JsonResponse;
}

/**
 * Response interface for getMoves operation
 * All possible responses for this operation must implement this interface
 */
interface GetMovesResponseInterface
{
    /**
     * Convert this response to a JSON response
     * @return JsonResponse
     */
    public function toJsonResponse(): JsonResponse;
}

/**
 * Response interface for getSquare operation
 * All possible responses for this operation must implement this interface
 */
interface GetSquareResponseInterface
{
    /**
     * Convert this response to a JSON response
     * @return JsonResponse
     */
    public function toJsonResponse(): JsonResponse;
}

/**
 * Response interface for putSquare operation
 * All possible responses for this operation must implement this interface
 */
interface PutSquareResponseInterface
{
    /**
     * Convert this response to a JSON response
     * @return JsonResponse
     */
    public function toJsonResponse(): JsonResponse;
}


// ============================================================================
// Concrete Response Classes - One per response code per operation
// ============================================================================

/**
 * HTTP 200 response for getBoard operation
 * OK
 */
class GetBoard200Response implements GetBoardResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Status $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 200);
    }
}

/**
 * HTTP 404 response for getBoard operation
 * Not Found - Resource does not exist
 */
class GetBoard404Response implements GetBoardResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Error $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 404);
    }
}

/**
 * HTTP 200 response for getGame operation
 * Successful response
 */
class GetGame200Response implements GetGameResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Game $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 200);
    }
}

/**
 * HTTP 404 response for getGame operation
 * Not Found - Resource does not exist
 */
class GetGame404Response implements GetGameResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Error $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 404);
    }
}

/**
 * HTTP 200 response for getMoves operation
 * Successful response
 */
class GetMoves200Response implements GetMovesResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\MoveHistory $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 200);
    }
}

/**
 * HTTP 404 response for getMoves operation
 * Not Found - Resource does not exist
 */
class GetMoves404Response implements GetMovesResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Error $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 404);
    }
}

/**
 * HTTP 200 response for getSquare operation
 * OK
 */
class GetSquare200Response implements GetSquareResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\SquareResponse $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 200);
    }
}

/**
 * HTTP 400 response for getSquare operation
 * Bad Request - Invalid parameters
 */
class GetSquare400Response implements GetSquareResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Error $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 400);
    }
}

/**
 * HTTP 404 response for getSquare operation
 * Not Found - Resource does not exist
 */
class GetSquare404Response implements GetSquareResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Error $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 404);
    }
}

/**
 * HTTP 200 response for putSquare operation
 * OK
 */
class PutSquare200Response implements PutSquareResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Status $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 200);
    }
}

/**
 * HTTP 400 response for putSquare operation
 * Bad Request - Invalid parameters
 */
class PutSquare400Response implements PutSquareResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Error $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 400);
    }
}

/**
 * HTTP 404 response for putSquare operation
 * Not Found - Resource does not exist
 */
class PutSquare404Response implements PutSquareResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Error $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 404);
    }
}

/**
 * HTTP 409 response for putSquare operation
 * Conflict - Square already occupied or game finished
 */
class PutSquare409Response implements PutSquareResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Error $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 409);
    }
}


// ============================================================================
// Handler Interfaces - One per operation
// ============================================================================

/**
 * Handler interface for getBoard operation
 * Implement this interface in your application to provide business logic
 */
interface GetBoardHandlerInterface
{
    /**
     * Handle getBoard operation
     *
     * Retrieves the current state of the board and the winner.
     *
     * @param string $gameId Unique game identifier
     * @return GetBoardResponseInterface
     */
    public function handle(
        string $gameId
    ): GetBoardResponseInterface;
}

/**
 * Handler interface for getGame operation
 * Implement this interface in your application to provide business logic
 */
interface GetGameHandlerInterface
{
    /**
     * Handle getGame operation
     *
     * Retrieves detailed information about a specific game.
     *
     * @param string $gameId Unique game identifier
     * @return GetGameResponseInterface
     */
    public function handle(
        string $gameId
    ): GetGameResponseInterface;
}

/**
 * Handler interface for getMoves operation
 * Implement this interface in your application to provide business logic
 */
interface GetMovesHandlerInterface
{
    /**
     * Handle getMoves operation
     *
     * Retrieves the complete move history for a game.
     *
     * @param string $gameId Unique game identifier
     * @return GetMovesResponseInterface
     */
    public function handle(
        string $gameId
    ): GetMovesResponseInterface;
}

/**
 * Handler interface for getSquare operation
 * Implement this interface in your application to provide business logic
 */
interface GetSquareHandlerInterface
{
    /**
     * Handle getSquare operation
     *
     * Retrieves the requested square.
     *
     * @param string $gameId Unique game identifier
     * @param int $row Board row (vertical coordinate)
     * @param int $column Board column (horizontal coordinate)
     * @return GetSquareResponseInterface
     */
    public function handle(
        string $gameId,
        int $row,
        int $column
    ): GetSquareResponseInterface;
}

/**
 * Handler interface for putSquare operation
 * Implement this interface in your application to provide business logic
 */
interface PutSquareHandlerInterface
{
    /**
     * Handle putSquare operation
     *
     * Places a mark on the board and retrieves the whole board and the winner (if any).
     *
     * @param string $gameId Unique game identifier
     * @param int $row Board row (vertical coordinate)
     * @param int $column Board column (horizontal coordinate)
     * @param \TicTacToeApiV2\Scaffolding\Models\MoveRequest $moveRequest 
     * @return PutSquareResponseInterface
     */
    public function handle(
        string $gameId,
        int $row,
        int $column,
        \TicTacToeApiV2\Scaffolding\Models\MoveRequest $moveRequest
    ): PutSquareResponseInterface;
}

