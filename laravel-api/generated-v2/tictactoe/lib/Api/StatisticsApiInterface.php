<?php declare(strict_types=1);

/**
 * Tic Tac Toe
 * This API allows writing down marks on a Tic Tac Toe board and requesting the state of the board or of individual squares.
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace TicTacToeApiV2\Scaffolding\Api;

use Illuminate\Http\JsonResponse;


interface StatisticsApiInterface {


    /**
     * Operation getLeaderboard
     *
     * Get leaderboard
     * @param null | \TicTacToeApiV2\Scaffolding\Models\GetLeaderboardTimeframeParameter $timeframe
     * @param null | int $limit
     * @return GetLeaderboardResponseInterface
     */
    public function getLeaderboard(
            ?\TicTacToeApiV2\Scaffolding\Models\GetLeaderboardTimeframeParameter $timeframe,
            ?int $limit,
    ): GetLeaderboardResponseInterface;


    /**
     * Operation getPlayerStats
     *
     * Get player statistics
     * @param string $playerId
     * @return GetPlayerStatsResponseInterface
     */
    public function getPlayerStats(
            string $playerId,
    ): GetPlayerStatsResponseInterface;

}

// ============================================================================
// Response Interfaces - One per operation
// ============================================================================

/**
 * Response interface for getLeaderboard operation
 * All possible responses for this operation must implement this interface
 */
interface GetLeaderboardResponseInterface
{
    /**
     * Convert this response to a JSON response
     * @return JsonResponse
     */
    public function toJsonResponse(): JsonResponse;
}

/**
 * Response interface for getPlayerStats operation
 * All possible responses for this operation must implement this interface
 */
interface GetPlayerStatsResponseInterface
{
    /**
     * Convert this response to a JSON response
     * @return JsonResponse
     */
    public function toJsonResponse(): JsonResponse;
}


// ============================================================================
// Concrete Response Classes - One per response code per operation
// ============================================================================

/**
 * HTTP 200 response for getLeaderboard operation
 * Successful response
 */
class GetLeaderboard200Response implements GetLeaderboardResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Leaderboard $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 200);
    }
}

/**
 * HTTP 200 response for getPlayerStats operation
 * Successful response
 */
class GetPlayerStats200Response implements GetPlayerStatsResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\PlayerStats $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 200);
    }
}

/**
 * HTTP 404 response for getPlayerStats operation
 * Not Found - Resource does not exist
 */
class GetPlayerStats404Response implements GetPlayerStatsResponseInterface
{
    public function __construct(
        private readonly \TicTacToeApiV2\Scaffolding\Models\Error $data
    ) {}

    public function toJsonResponse(): JsonResponse
    {
        // Serialize single model
        $serializer = new \Crell\Serde\SerdeCommon();
        $serialized = $serializer->serialize($this->data, 'array');
        return response()->json($serialized, 404);
    }
}


// ============================================================================
// Handler Interfaces - One per operation
// ============================================================================

/**
 * Handler interface for getLeaderboard operation
 * Implement this interface in your application to provide business logic
 */
interface GetLeaderboardHandlerInterface
{
    /**
     * Handle getLeaderboard operation
     *
     * Retrieves the global leaderboard with top players.
     *
     * @param \TicTacToeApiV2\Scaffolding\Models\GetLeaderboardTimeframeParameter $timeframe Timeframe for leaderboard statistics
     * @param int $limit Number of top players to return
     * @return GetLeaderboardResponseInterface
     */
    public function handle(
        ?\TicTacToeApiV2\Scaffolding\Models\GetLeaderboardTimeframeParameter $timeframe,
        ?int $limit
    ): GetLeaderboardResponseInterface;
}

/**
 * Handler interface for getPlayerStats operation
 * Implement this interface in your application to provide business logic
 */
interface GetPlayerStatsHandlerInterface
{
    /**
     * Handle getPlayerStats operation
     *
     * Retrieves comprehensive statistics for a player.
     *
     * @param string $playerId Unique player identifier
     * @return GetPlayerStatsResponseInterface
     */
    public function handle(
        string $playerId
    ): GetPlayerStatsResponseInterface;
}

