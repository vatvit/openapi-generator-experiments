<?php declare(strict_types=1);

/**
 * Tic Tac Toe
 * This API allows writing down marks on a Tic Tac Toe board and requesting the state of the board or of individual squares.
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace TicTacToeApiV2\Server\Security;

/**
 * Security Interface: defaultApiKey
 *
 * Generated from OpenAPI security scheme
 * Type: apiKey
 * Description: API key provided in console
 * API Key Parameter: api-key
 * Location: header
 *
 * Implementation Requirements:
 * - Middleware MUST implement this interface
 * - Middleware will be validated at route registration
 * - Failed validation will throw RuntimeException
 *
 * Example Implementation:
 * ```php
 * namespace App\Http\Middleware;
 *
 * use TicTacToeApiV2\Server\Security\defaultApiKeyInterface;
 * use Closure;
 * use Illuminate\Http\Request;
 * use Symfony\Component\HttpFoundation\Response;
 *
 * class ValidatedefaultApiKey implements defaultApiKeyInterface
 * {
 *     public function handle(Request $request, Closure $next): Response
 *     {
 *         // Validate api-key from header
 *         $apiKey = $request->header('api-key');
 *         if (empty($apiKey)) {
 *             return response()->json(['error' => 'API key required'], 401);
 *         }
 *         // TODO: Validate API key against your storage
 *         return $next($request);
 *     }
 * }
 * ```
 */
interface defaultApiKeyInterface
{
    /**
     * Handle incoming request with apiKey authentication
     *
     * @param \Illuminate\Http\Request $request
     * @param \Closure $next
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function handle($request, \Closure $next);
}

/**
 * Security Interface: basicHttpAuthentication
 *
 * Generated from OpenAPI security scheme
 * Type: http
 * Description: Basic HTTP Authentication
 * Scheme: Basic HTTP Authentication
 *
 * Implementation Requirements:
 * - Middleware MUST implement this interface
 * - Middleware will be validated at route registration
 * - Failed validation will throw RuntimeException
 *
 * Example Implementation:
 * ```php
 * namespace App\Http\Middleware;
 *
 * use TicTacToeApiV2\Server\Security\basicHttpAuthenticationInterface;
 * use Closure;
 * use Illuminate\Http\Request;
 * use Symfony\Component\HttpFoundation\Response;
 *
 * class ValidatebasicHttpAuthentication implements basicHttpAuthenticationInterface
 * {
 *     public function handle(Request $request, Closure $next): Response
 *     {
 *         // Validate Basic auth from Authorization header
 *         $authHeader = $request->header('Authorization');
 *         if (!str_starts_with($authHeader, 'Basic ')) {
 *             return response()->json(['error' => 'Basic auth required'], 401);
 *         }
 *         // TODO: Validate credentials
 *         return $next($request);
 *     }
 * }
 * ```
 */
interface basicHttpAuthenticationInterface
{
    /**
     * Handle incoming request with http authentication
     *
     * @param \Illuminate\Http\Request $request
     * @param \Closure $next
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function handle($request, \Closure $next);
}

/**
 * Security Interface: bearerHttpAuthentication
 *
 * Generated from OpenAPI security scheme
 * Type: http
 * Description: Bearer token using a JWT
 * Scheme: Bearer
 * Bearer Format: JWT
 *
 * Implementation Requirements:
 * - Middleware MUST implement this interface
 * - Middleware will be validated at route registration
 * - Failed validation will throw RuntimeException
 *
 * Example Implementation:
 * ```php
 * namespace App\Http\Middleware;
 *
 * use TicTacToeApiV2\Server\Security\bearerHttpAuthenticationInterface;
 * use Closure;
 * use Illuminate\Http\Request;
 * use Symfony\Component\HttpFoundation\Response;
 *
 * class ValidatebearerHttpAuthentication implements bearerHttpAuthenticationInterface
 * {
 *     public function handle(Request $request, Closure $next): Response
 *     {
 *         // Validate Bearer token from Authorization header
 *         $authHeader = $request->header('Authorization');
 *         if (!str_starts_with($authHeader, 'Bearer ')) {
 *             return response()->json(['error' => 'Bearer token required'], 401);
 *         }
 *         $token = substr($authHeader, 7);
 *         // TODO: Validate JWT token
 *         return $next($request);
 *     }
 * }
 * ```
 */
interface bearerHttpAuthenticationInterface
{
    /**
     * Handle incoming request with http authentication
     *
     * @param \Illuminate\Http\Request $request
     * @param \Closure $next
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function handle($request, \Closure $next);
}

/**
 * Security Interface: app2AppOauth
 *
 * Generated from OpenAPI security scheme
 * Type: oauth2
 * OAuth Flow: application
 * Token URL: https://learn.openapis.org/oauth/2.0/token
 * Available Scopes:
 *   - board:read: Read the board
 *
 * Implementation Requirements:
 * - Middleware MUST implement this interface
 * - Middleware will be validated at route registration
 * - Failed validation will throw RuntimeException
 *
 * Example Implementation:
 * ```php
 * namespace App\Http\Middleware;
 *
 * use TicTacToeApiV2\Server\Security\app2AppOauthInterface;
 * use Closure;
 * use Illuminate\Http\Request;
 * use Symfony\Component\HttpFoundation\Response;
 *
 * class Validateapp2AppOauth implements app2AppOauthInterface
 * {
 *     public function handle(Request $request, Closure $next): Response
 *     {
 *         // Validate OAuth token and scopes
 *         $token = $request->bearerToken();
 *         if (empty($token)) {
 *             return response()->json(['error' => 'OAuth token required'], 401);
 *         }
 *         // TODO: Validate token and scopes
 *         return $next($request);
 *     }
 *
 *     public function validateScopes(array $requiredScopes): bool
 *     {
 *         // TODO: Implement scope validation
 *         // Compare required scopes against token scopes
 *         return true;
 *     }
 * }
 * ```
 */
interface app2AppOauthInterface
{
    /**
     * Handle incoming request with oauth2 authentication
     *
     * @param \Illuminate\Http\Request $request
     * @param \Closure $next
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function handle($request, \Closure $next);

    /**
     * Validate OAuth scopes
     *
     * @param array $requiredScopes List of required scope names
     * @return bool True if all required scopes are present
     */
    public function validateScopes(array $requiredScopes): bool;
}

/**
 * Security Interface: user2AppOauth
 *
 * Generated from OpenAPI security scheme
 * Type: oauth2
 * OAuth Flow: accessCode
 * Authorization URL: https://learn.openapis.org/oauth/2.0/auth
 * Token URL: https://learn.openapis.org/oauth/2.0/token
 * Available Scopes:
 *   - board:read: Read the board
 *   - board:write: Write to the board
 * Available Scopes:
 *   - board:read: Read the board
 *   - board:write: Write to the board
 *
 * Implementation Requirements:
 * - Middleware MUST implement this interface
 * - Middleware will be validated at route registration
 * - Failed validation will throw RuntimeException
 *
 * Example Implementation:
 * ```php
 * namespace App\Http\Middleware;
 *
 * use TicTacToeApiV2\Server\Security\user2AppOauthInterface;
 * use Closure;
 * use Illuminate\Http\Request;
 * use Symfony\Component\HttpFoundation\Response;
 *
 * class Validateuser2AppOauth implements user2AppOauthInterface
 * {
 *     public function handle(Request $request, Closure $next): Response
 *     {
 *         // Validate OAuth token and scopes
 *         $token = $request->bearerToken();
 *         if (empty($token)) {
 *             return response()->json(['error' => 'OAuth token required'], 401);
 *         }
 *         // TODO: Validate token and scopes
 *         return $next($request);
 *     }
 *
 *     public function validateScopes(array $requiredScopes): bool
 *     {
 *         // TODO: Implement scope validation
 *         // Compare required scopes against token scopes
 *         return true;
 *     }
 * }
 * ```
 */
interface user2AppOauthInterface
{
    /**
     * Handle incoming request with oauth2 authentication
     *
     * @param \Illuminate\Http\Request $request
     * @param \Closure $next
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function handle($request, \Closure $next);

    /**
     * Validate OAuth scopes
     *
     * @param array $requiredScopes List of required scope names
     * @return bool True if all required scopes are present
     */
    public function validateScopes(array $requiredScopes): bool;
}

