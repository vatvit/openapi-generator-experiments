<?php declare(strict_types=1);

/**
 * Tic Tac Toe
 * This API allows writing down marks on a Tic Tac Toe board and requesting the state of the board or of individual squares.
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace TicTacToeApiV2\Server\Security;

/**
 * Security Middleware Validator
 *
 * Auto-generated validation helper for security middleware
 * Validates that all required security middleware is properly configured
 *
 * Call from Laravel service provider or bootstrap to validate middleware configuration:
 *
 * ```php
 * TicTacToeApiV2\Server\Security\SecurityValidator::validateMiddleware(app('router'));
 * ```
 */
class SecurityValidator
{
    /**
     * Validate that all required middleware is registered and implements correct interfaces
     *
     * @param \Illuminate\Routing\Router $router Laravel router instance
     * @throws \RuntimeException if validation fails
     * @return void
     */
    public static function validateMiddleware(\Illuminate\Routing\Router $router): void
    {
        $errors = [];

        // Validate createGame operation security
        if ($router->hasMiddlewareGroup('api.middlewareGroup.createGame')) {
            $middlewares = $router->getMiddlewareGroups()['api.middlewareGroup.createGame'] ?? [];
            $requiredInterfaces = [
                bearerHttpAuthenticationInterface::class,
            ];

            foreach ($requiredInterfaces as $interface) {
                $hasImplementation = false;
                foreach ($middlewares as $middleware) {
                    // Handle both class strings and instances
                    $middlewareClass = is_string($middleware) ? $middleware : get_class($middleware);
                    if (is_subclass_of($middlewareClass, $interface)) {
                        $hasImplementation = true;
                        break;
                    }
                }
                if (!$hasImplementation) {
                    $errors[] = "Operation 'createGame' requires middleware implementing: {$interface}";
                }
            }
        } else {
            // Only warn if operation requires security but group is missing
            $errors[] = "Operation 'createGame' requires authentication but middleware group 'api.middlewareGroup.createGame' is not registered";
        }

        // Validate deleteGame operation security
        if ($router->hasMiddlewareGroup('api.middlewareGroup.deleteGame')) {
            $middlewares = $router->getMiddlewareGroups()['api.middlewareGroup.deleteGame'] ?? [];
            $requiredInterfaces = [
                bearerHttpAuthenticationInterface::class,
            ];

            foreach ($requiredInterfaces as $interface) {
                $hasImplementation = false;
                foreach ($middlewares as $middleware) {
                    // Handle both class strings and instances
                    $middlewareClass = is_string($middleware) ? $middleware : get_class($middleware);
                    if (is_subclass_of($middlewareClass, $interface)) {
                        $hasImplementation = true;
                        break;
                    }
                }
                if (!$hasImplementation) {
                    $errors[] = "Operation 'deleteGame' requires middleware implementing: {$interface}";
                }
            }
        } else {
            // Only warn if operation requires security but group is missing
            $errors[] = "Operation 'deleteGame' requires authentication but middleware group 'api.middlewareGroup.deleteGame' is not registered";
        }

        // Validate getBoard operation security
        if ($router->hasMiddlewareGroup('api.middlewareGroup.getBoard')) {
            $middlewares = $router->getMiddlewareGroups()['api.middlewareGroup.getBoard'] ?? [];
            $requiredInterfaces = [
                defaultApiKeyInterface::class,
                app2AppOauthInterface::class,
            ];

            foreach ($requiredInterfaces as $interface) {
                $hasImplementation = false;
                foreach ($middlewares as $middleware) {
                    // Handle both class strings and instances
                    $middlewareClass = is_string($middleware) ? $middleware : get_class($middleware);
                    if (is_subclass_of($middlewareClass, $interface)) {
                        $hasImplementation = true;
                        break;
                    }
                }
                if (!$hasImplementation) {
                    $errors[] = "Operation 'getBoard' requires middleware implementing: {$interface}";
                }
            }
        } else {
            // Only warn if operation requires security but group is missing
            $errors[] = "Operation 'getBoard' requires authentication but middleware group 'api.middlewareGroup.getBoard' is not registered";
        }

        // Validate getGame operation security
        if ($router->hasMiddlewareGroup('api.middlewareGroup.getGame')) {
            $middlewares = $router->getMiddlewareGroups()['api.middlewareGroup.getGame'] ?? [];
            $requiredInterfaces = [
                bearerHttpAuthenticationInterface::class,
            ];

            foreach ($requiredInterfaces as $interface) {
                $hasImplementation = false;
                foreach ($middlewares as $middleware) {
                    // Handle both class strings and instances
                    $middlewareClass = is_string($middleware) ? $middleware : get_class($middleware);
                    if (is_subclass_of($middlewareClass, $interface)) {
                        $hasImplementation = true;
                        break;
                    }
                }
                if (!$hasImplementation) {
                    $errors[] = "Operation 'getGame' requires middleware implementing: {$interface}";
                }
            }
        } else {
            // Only warn if operation requires security but group is missing
            $errors[] = "Operation 'getGame' requires authentication but middleware group 'api.middlewareGroup.getGame' is not registered";
        }

        // Validate getMoves operation security
        if ($router->hasMiddlewareGroup('api.middlewareGroup.getMoves')) {
            $middlewares = $router->getMiddlewareGroups()['api.middlewareGroup.getMoves'] ?? [];
            $requiredInterfaces = [
                bearerHttpAuthenticationInterface::class,
            ];

            foreach ($requiredInterfaces as $interface) {
                $hasImplementation = false;
                foreach ($middlewares as $middleware) {
                    // Handle both class strings and instances
                    $middlewareClass = is_string($middleware) ? $middleware : get_class($middleware);
                    if (is_subclass_of($middlewareClass, $interface)) {
                        $hasImplementation = true;
                        break;
                    }
                }
                if (!$hasImplementation) {
                    $errors[] = "Operation 'getMoves' requires middleware implementing: {$interface}";
                }
            }
        } else {
            // Only warn if operation requires security but group is missing
            $errors[] = "Operation 'getMoves' requires authentication but middleware group 'api.middlewareGroup.getMoves' is not registered";
        }

        // Validate getPlayerStats operation security
        if ($router->hasMiddlewareGroup('api.middlewareGroup.getPlayerStats')) {
            $middlewares = $router->getMiddlewareGroups()['api.middlewareGroup.getPlayerStats'] ?? [];
            $requiredInterfaces = [
                bearerHttpAuthenticationInterface::class,
            ];

            foreach ($requiredInterfaces as $interface) {
                $hasImplementation = false;
                foreach ($middlewares as $middleware) {
                    // Handle both class strings and instances
                    $middlewareClass = is_string($middleware) ? $middleware : get_class($middleware);
                    if (is_subclass_of($middlewareClass, $interface)) {
                        $hasImplementation = true;
                        break;
                    }
                }
                if (!$hasImplementation) {
                    $errors[] = "Operation 'getPlayerStats' requires middleware implementing: {$interface}";
                }
            }
        } else {
            // Only warn if operation requires security but group is missing
            $errors[] = "Operation 'getPlayerStats' requires authentication but middleware group 'api.middlewareGroup.getPlayerStats' is not registered";
        }

        // Validate getSquare operation security
        if ($router->hasMiddlewareGroup('api.middlewareGroup.getSquare')) {
            $middlewares = $router->getMiddlewareGroups()['api.middlewareGroup.getSquare'] ?? [];
            $requiredInterfaces = [
                bearerHttpAuthenticationInterface::class,
                user2AppOauthInterface::class,
            ];

            foreach ($requiredInterfaces as $interface) {
                $hasImplementation = false;
                foreach ($middlewares as $middleware) {
                    // Handle both class strings and instances
                    $middlewareClass = is_string($middleware) ? $middleware : get_class($middleware);
                    if (is_subclass_of($middlewareClass, $interface)) {
                        $hasImplementation = true;
                        break;
                    }
                }
                if (!$hasImplementation) {
                    $errors[] = "Operation 'getSquare' requires middleware implementing: {$interface}";
                }
            }
        } else {
            // Only warn if operation requires security but group is missing
            $errors[] = "Operation 'getSquare' requires authentication but middleware group 'api.middlewareGroup.getSquare' is not registered";
        }

        // Validate listGames operation security
        if ($router->hasMiddlewareGroup('api.middlewareGroup.listGames')) {
            $middlewares = $router->getMiddlewareGroups()['api.middlewareGroup.listGames'] ?? [];
            $requiredInterfaces = [
                bearerHttpAuthenticationInterface::class,
            ];

            foreach ($requiredInterfaces as $interface) {
                $hasImplementation = false;
                foreach ($middlewares as $middleware) {
                    // Handle both class strings and instances
                    $middlewareClass = is_string($middleware) ? $middleware : get_class($middleware);
                    if (is_subclass_of($middlewareClass, $interface)) {
                        $hasImplementation = true;
                        break;
                    }
                }
                if (!$hasImplementation) {
                    $errors[] = "Operation 'listGames' requires middleware implementing: {$interface}";
                }
            }
        } else {
            // Only warn if operation requires security but group is missing
            $errors[] = "Operation 'listGames' requires authentication but middleware group 'api.middlewareGroup.listGames' is not registered";
        }

        // Validate putSquare operation security
        if ($router->hasMiddlewareGroup('api.middlewareGroup.putSquare')) {
            $middlewares = $router->getMiddlewareGroups()['api.middlewareGroup.putSquare'] ?? [];
            $requiredInterfaces = [
                bearerHttpAuthenticationInterface::class,
                user2AppOauthInterface::class,
            ];

            foreach ($requiredInterfaces as $interface) {
                $hasImplementation = false;
                foreach ($middlewares as $middleware) {
                    // Handle both class strings and instances
                    $middlewareClass = is_string($middleware) ? $middleware : get_class($middleware);
                    if (is_subclass_of($middlewareClass, $interface)) {
                        $hasImplementation = true;
                        break;
                    }
                }
                if (!$hasImplementation) {
                    $errors[] = "Operation 'putSquare' requires middleware implementing: {$interface}";
                }
            }
        } else {
            // Only warn if operation requires security but group is missing
            $errors[] = "Operation 'putSquare' requires authentication but middleware group 'api.middlewareGroup.putSquare' is not registered";
        }


        if (!empty($errors)) {
            throw new \RuntimeException(
                "Security middleware validation failed:\n  - " . implode("\n  - ", $errors)
            );
        }
    }

    /**
     * Get required security interfaces for each operation
     *
     * @return array<string, array<string>> Operation ID => Array of required interface class names
     */
    public static function getRequiredInterfaces(): array
    {
        return [
            'createGame' => [
                bearerHttpAuthenticationInterface::class,
            ],
            'deleteGame' => [
                bearerHttpAuthenticationInterface::class,
            ],
            'getBoard' => [
                defaultApiKeyInterface::class,
                app2AppOauthInterface::class,
            ],
            'getGame' => [
                bearerHttpAuthenticationInterface::class,
            ],
            'getMoves' => [
                bearerHttpAuthenticationInterface::class,
            ],
            'getPlayerStats' => [
                bearerHttpAuthenticationInterface::class,
            ],
            'getSquare' => [
                bearerHttpAuthenticationInterface::class,
                user2AppOauthInterface::class,
            ],
            'listGames' => [
                bearerHttpAuthenticationInterface::class,
            ],
            'putSquare' => [
                bearerHttpAuthenticationInterface::class,
                user2AppOauthInterface::class,
            ],
        ];
    }

    /**
     * Get all operations that require security
     *
     * @return array<string> Array of operation IDs
     */
    public static function getSecuredOperations(): array
    {
        return [
            'createGame',
            'deleteGame',
            'getBoard',
            'getGame',
            'getMoves',
            'getPlayerStats',
            'getSquare',
            'listGames',
            'putSquare',
        ];
    }

    /**
     * Check if a specific operation requires security
     *
     * @param string $operationId Operation identifier
     * @return bool True if operation requires authentication
     */
    public static function requiresSecurity(string $operationId): bool
    {
        return in_array($operationId, self::getSecuredOperations(), true);
    }
}
