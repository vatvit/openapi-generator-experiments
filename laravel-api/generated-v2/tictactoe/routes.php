<?php declare(strict_types=1);

/**
 * Tic Tac Toe
 * This API allows writing down marks on a Tic Tac Toe board and requesting the state of the board or of individual squares.
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */

/**
 * GENERATED API ROUTES
 *
 * This file is generated from OpenAPI specification.
 * Include this file from your Laravel routes/api.php within a Route::group.
 *
 * Controller name is defined in OpenAPI spec: info.title
 *
 * Routes will use middleware groups with 'api.middlewareGroup.' prefix if they are defined.
 * For example: 'api.middlewareGroup.findPets', 'api.middlewareGroup.addPet', etc.
 * Define these groups in bootstrap/app.php only when you need custom middleware for an operation.
 *
 * Usage in routes/api.php:
 * ```php
 * // Bind controller name to concrete implementation in Service Container
 * app()->bind('Tic Tac Toe', \App\Http\Controllers\Api\YourController::class);
 *
 * // Wrap generated routes in a group
 * Route::group(['prefix' => 'v2', 'middleware' => ['api']], function ($router) {
 *     require base_path('generated/scaffolding/routes.php');
 * });
 * ```
 *
 * MIDDLEWARE USAGE:
 *
 * Routes will automatically use middleware groups named 'api.middlewareGroup.{operationId}'
 * if they are defined in your application. Define middleware groups in bootstrap/app.php:
 *
 * ```php
 * ->withMiddleware(function (Middleware $middleware): void {
 *     // Define middleware groups for specific operations
 *     $middleware->group('api.middlewareGroup.findPets', [
 *         \App\Http\Middleware\CacheResponse::class,
 *     ]);
 *
 *     $middleware->group('api.middlewareGroup.addPet', [
 *         \App\Http\Middleware\ValidateOwnership::class,
 *         \App\Http\Middleware\LogCreation::class,
 *     ]);
 *
 *     $middleware->group('api.middlewareGroup.deletePet', [
 *         \App\Http\Middleware\RequireAdmin::class,
 *     ]);
 * })
 * ```
 *
 * Routes will only have middleware attached if their corresponding group is defined.
 * Operations without defined middleware groups will have no middleware applied.
 */

// Use $router variable passed from Route::group closure
// This file expects $router to be available from the including context

/**
 * POST /games
 * Create a new game
 * Creates a new TicTacToe game with specified configuration.
 */
$route = $router->POST('/v1/games', 'Tic Tac Toe@createGame')
    ->name('api.createGame');

// Only attach middleware if the group is registered in the application
if ($router->hasMiddlewareGroup('api.middlewareGroup.createGame')) {
    $route->middleware('api.middlewareGroup.createGame');
}

/**
 * DELETE /games/{gameId}
 * Delete a game
 * Deletes a game. Only allowed for game creators or admins.
 */
$route = $router->DELETE('/v1/games/{gameId}', 'Tic Tac Toe@deleteGame')
    ->name('api.deleteGame');

// Only attach middleware if the group is registered in the application
if ($router->hasMiddlewareGroup('api.middlewareGroup.deleteGame')) {
    $route->middleware('api.middlewareGroup.deleteGame');
}

/**
 * GET /games/{gameId}
 * Get game details
 * Retrieves detailed information about a specific game.
 */
$route = $router->GET('/v1/games/{gameId}', 'Tic Tac Toe@getGame')
    ->name('api.getGame');

// Only attach middleware if the group is registered in the application
if ($router->hasMiddlewareGroup('api.middlewareGroup.getGame')) {
    $route->middleware('api.middlewareGroup.getGame');
}

/**
 * GET /games
 * List all games
 * Retrieves a paginated list of games with optional filtering.
 */
$route = $router->GET('/v1/games', 'Tic Tac Toe@listGames')
    ->name('api.listGames');

// Only attach middleware if the group is registered in the application
if ($router->hasMiddlewareGroup('api.middlewareGroup.listGames')) {
    $route->middleware('api.middlewareGroup.listGames');
}

/**
 * GET /games/{gameId}/board
 * Get the game board
 * Retrieves the current state of the board and the winner.
 */
$route = $router->GET('/v1/games/{gameId}/board', 'Tic Tac Toe@getBoard')
    ->name('api.getBoard');

// Only attach middleware if the group is registered in the application
if ($router->hasMiddlewareGroup('api.middlewareGroup.getBoard')) {
    $route->middleware('api.middlewareGroup.getBoard');
}

/**
 * GET /games/{gameId}
 * Get game details
 * Retrieves detailed information about a specific game.
 */
$route = $router->GET('/v1/games/{gameId}', 'Tic Tac Toe@getGame')
    ->name('api.getGame');

// Only attach middleware if the group is registered in the application
if ($router->hasMiddlewareGroup('api.middlewareGroup.getGame')) {
    $route->middleware('api.middlewareGroup.getGame');
}

/**
 * GET /games/{gameId}/moves
 * Get move history
 * Retrieves the complete move history for a game.
 */
$route = $router->GET('/v1/games/{gameId}/moves', 'Tic Tac Toe@getMoves')
    ->name('api.getMoves');

// Only attach middleware if the group is registered in the application
if ($router->hasMiddlewareGroup('api.middlewareGroup.getMoves')) {
    $route->middleware('api.middlewareGroup.getMoves');
}

/**
 * GET /games/{gameId}/board/{row}/{column}
 * Get a single board square
 * Retrieves the requested square.
 */
$route = $router->GET('/v1/games/{gameId}/board/{row}/{column}', 'Tic Tac Toe@getSquare')
    ->name('api.getSquare');

// Only attach middleware if the group is registered in the application
if ($router->hasMiddlewareGroup('api.middlewareGroup.getSquare')) {
    $route->middleware('api.middlewareGroup.getSquare');
}

/**
 * PUT /games/{gameId}/board/{row}/{column}
 * Set a single board square
 * Places a mark on the board and retrieves the whole board and the winner (if any).
 */
$route = $router->PUT('/v1/games/{gameId}/board/{row}/{column}', 'Tic Tac Toe@putSquare')
    ->name('api.putSquare');

// Only attach middleware if the group is registered in the application
if ($router->hasMiddlewareGroup('api.middlewareGroup.putSquare')) {
    $route->middleware('api.middlewareGroup.putSquare');
}

/**
 * GET /leaderboard
 * Get leaderboard
 * Retrieves the global leaderboard with top players.
 */
$route = $router->GET('/v1/leaderboard', 'Tic Tac Toe@getLeaderboard')
    ->name('api.getLeaderboard');

// Only attach middleware if the group is registered in the application
if ($router->hasMiddlewareGroup('api.middlewareGroup.getLeaderboard')) {
    $route->middleware('api.middlewareGroup.getLeaderboard');
}

/**
 * GET /players/{playerId}/stats
 * Get player statistics
 * Retrieves comprehensive statistics for a player.
 */
$route = $router->GET('/v1/players/{playerId}/stats', 'Tic Tac Toe@getPlayerStats')
    ->name('api.getPlayerStats');

// Only attach middleware if the group is registered in the application
if ($router->hasMiddlewareGroup('api.middlewareGroup.getPlayerStats')) {
    $route->middleware('api.middlewareGroup.getPlayerStats');
}

/**
 * GET /games/{gameId}/board
 * Get the game board
 * Retrieves the current state of the board and the winner.
 */
$route = $router->GET('/v1/games/{gameId}/board', 'Tic Tac Toe@getBoard')
    ->name('api.getBoard');

// Only attach middleware if the group is registered in the application
if ($router->hasMiddlewareGroup('api.middlewareGroup.getBoard')) {
    $route->middleware('api.middlewareGroup.getBoard');
}

