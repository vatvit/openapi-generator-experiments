<?php declare(strict_types=1);

/**
 * PetStoreApiController
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace PetStoreApiV2\Server\Security;

/**
 * Security Middleware Validator
 *
 * Auto-generated validation helper for security middleware
 * Validates that all required security middleware is properly configured
 *
 * Call from Laravel service provider or bootstrap to validate middleware configuration:
 *
 * ```php
 * PetStoreApiV2\Server\Security\SecurityValidator::validateMiddleware(app('router'));
 * ```
 */
class SecurityValidator
{
    /**
     * Validate that all required middleware is registered and implements correct interfaces
     *
     * @param \Illuminate\Routing\Router $router Laravel router instance
     * @throws \RuntimeException if validation fails
     * @return void
     */
    public static function validateMiddleware(\Illuminate\Routing\Router $router): void
    {
        $errors = [];


        if (!empty($errors)) {
            throw new \RuntimeException(
                "Security middleware validation failed:\n  - " . implode("\n  - ", $errors)
            );
        }
    }

    /**
     * Get required security interfaces for each operation
     *
     * @return array<string, array<string>> Operation ID => Array of required interface class names
     */
    public static function getRequiredInterfaces(): array
    {
        return [
        ];
    }

    /**
     * Get all operations that require security
     *
     * @return array<string> Array of operation IDs
     */
    public static function getSecuredOperations(): array
    {
        return [
        ];
    }

    /**
     * Check if a specific operation requires security
     *
     * @param string $operationId Operation identifier
     * @return bool True if operation requires authentication
     */
    public static function requiresSecurity(string $operationId): bool
    {
        return in_array($operationId, self::getSecuredOperations(), true);
    }
}
